@{
    ViewBag.Title = "EntityView";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section script
{

    <script type="text/javascript" src="../../../../Scripts/ngcommon.js"></script>
    <script type="text/javascript" src="../../../../Scripts/languagewindow.js"></script>
    <script type="text/javascript">
        var otype = '@ViewBag.OType';
        var buskey = '@ViewBag.Id';
        var transferData = Ext.JSON.decode(Ext.htmlDecode('@ViewBag.TransferData'));
        var transferGridData = Ext.JSON.decode(Ext.htmlDecode('@ViewBag.TransferGridData'));
        var transferPropertiesGridData = Ext.JSON.decode(Ext.htmlDecode('@ViewBag.TransferPropertiesGridData'));
        
        var displayData = Ext.JSON.decode(Ext.htmlDecode('@ViewBag.DisplayLanguageData'));
        var descriptionData = Ext.JSON.decode(Ext.htmlDecode('@ViewBag.DescriptionLanguageData'));
    </script>
    <script src="@Url.Content("~/AppJS/Metadata/Entity/app.js")" type="text/javascript" charset="utf-8"></script>
   @* <script type="text/javascript">
        Ext.onReady(function () {
            Ext.QuickTips.init();

            var ngToolbar = Ext.create('Ext.ng.Toolbar',
                {
                    region: 'north',
                    //renderTo: 'toolbar',
                    border: false,
                    //split: true,
                    height: 26,
                    minSize: 26,
                    maxSize: 26,
                    ngbuttons: [
                        'save', { id: "export", text: "同步表结构", iconCls: 'icon-Export' }, "->", 'close'
                    ]
                });

            var relationToolbar = Ext.create('Ext.ng.Toolbar',
                {
                    region: 'north',
                    //renderTo: 'toolbar',
                    border: false,
                    //split: true,
                    height: 26,
                    minSize: 26,
                    maxSize: 26,
                    items: [
                        {
                            id: "addRelation",
                            text: '增行',
                            iconCls: 'add'
                        },
                        {
                            id: "deleteRelation",
                            text: '删行',
                            iconCls: 'cross'
                        }
                    ]
                });

            var propertyToolbar = Ext.create('Ext.ng.Toolbar',
                {
                    region: 'north',
                    //renderTo: 'toolbar',
                    border: false,
                    //split: true,
                    height: 26,
                    minSize: 26,
                    maxSize: 26,
                    items: [
                        {
                            id: "addProperty",
                            text: '新增',
                            iconCls: 'add'
                        },
                        {
                            id: "editProperty",
                            text: '编辑',
                            iconCls: 'cross'
                        },
                        {
                            id: "DeleteProperty",
                            text: '删除',
                            iconCls: 'cross'
                        },
                        {
                            id: "ViewProperty",
                            text: '查看',
                            iconCls: 'cross'
                        }
                    ]
                });

            var baseNodeInfoPanel = Ext.create('Ext.ng.TableLayoutForm', {
                buskey: 'id',
                otype: otype,
                columnsPerRow: 3,
                fields: [{
                        id: 'Id',
                        xtype: 'ngText',
                        fieldLabel: '编号',
                        name: 'Id',
                        hidden: true
                    }, {
                        id: 'ParentId',
                        xtype: 'ngText',
                        fieldLabel: '父亲节点编号',
                        name: 'ParentId',
                        hidden: true
                    }, {
                        id: 'ParentVersionId',
                        xtype: 'ngText',
                        fieldLabel: '父亲节点版本编号',
                        name: 'ParentVersionId',
                        hidden: true
                    }, {
                        id: 'Name',
                        xtype: 'ngText',
                        fieldLabel: '名称',
                        name: 'Name',
                        mustInput: true
                    }, {
                        id: 'CurrentDisplayName',
                        xtype: 'ngText',
                        fieldLabel: '显示名称',
                        name: 'CurrentDisplayName',
                        mustInput: true
                    }, {
                        id: 'DisplayName',
                        xtype: 'ngText',
                        fieldLabel: '显示名称',
                        name: 'DisplayName',
                        hidden: true
                    }, {
                        id: 'Namespace',
                        xtype: 'ngText',
                        fieldLabel: '命名空间',
                        mustInput: true, //必输列
                        name: 'Namespace'
                    }, {
                        id: 'Version',
                        xtype: 'ngText',
                        fieldLabel: '版本',
                        mustInput: true, //必输列
                        name: 'Version'
                    }, {
                        id: 'KeyMapColumn',
                        xtype: 'ngText',
                        fieldLabel: '主键映射字段',
                        mustInput: true, //必输列
                        name: 'KeyMapColumn'
                    }, {
                        xtype: 'combo',
                        store: keyGenerateStyleStore,
                        fieldLabel: '主键产生方式',
                        queryMode: 'local',
                        id: 'KeyGenerateStyle',
                        name: 'KeyGenerateStyle',
                        valueField: 'value',
                        displayField: 'text'
                    }, {
                        xtype: 'combo',
                        store: yesAndNo,
                        fieldLabel: '树形展示',
                        queryMode: 'local',
                        id: 'IsTreeStyle',
                        name: 'IsTreeStyle',
                        valueField: 'value',
                        displayField: 'text'
                    }, {
                        id: 'ParentNodePropertyId',
                        xtype: 'ngText',
                        fieldLabel: '父节点属性',
                        name: 'ParentNodePropertyId'
                    }, {
                        id: 'ChildNodePropertyId',
                        xtype: 'ngText',
                        fieldLabel: '子节点属性',
                        name: 'ChildNodePropertyId'
                    }, {
                        id: 'UpdateTable',
                        xtype: 'ngText',
                        fieldLabel: '更新表',
                        name: 'UpdateTable'
                    }, {
                        xtype: 'ngTextArea',
                        fieldLabel: 'SQL语句',
                        name: 'Sql',
                        colspan: 3
                    }, {
                        xtype: 'ngTextArea',
                        fieldLabel: '备注',
                        name: 'Remark',
                        colspan: 3
                    }]
            });

            var bizNodeInfoPanel = Ext.create('Ext.ng.TableLayoutForm', {
                buskey: 'id',
                otype: otype,
                columnsPerRow: 3,
                fields: [{
                    xtype: 'combo',
                    store: industryStyleStore,
                    fieldLabel: '行业化分类',
                    queryMode: 'local',
                    id: 'IndustryStyle',
                    name: 'IndustryStyle',
                    valueField: 'value',
                    displayField: 'text'
                    }, {
                        xtype: 'combo',
                        store: yesAndNo,
                        fieldLabel: '权限控制',
                        queryMode: 'local',
                        id: 'HaveRights',
                        name: 'HaveRights',
                        valueField: 'value',
                        displayField: 'text'
                    }, {
                        xtype: 'combo',
                        store: yesAndNo,
                        fieldLabel: '敏感数据',
                        queryMode: 'local',
                        id: 'IsSensitive',
                        name: 'IsSensitive',
                        valueField: 'value',
                        displayField: 'text'
                    }, {
                        xtype: 'combo',
                        store: yesAndNo,
                        fieldLabel: '多组织',
                        queryMode: 'local',
                        id: 'IsMultiOrg',
                        name: 'IsMultiOrg',
                        valueField: 'value',
                        displayField: 'text'
                    }, {
                        xtype: 'combo',
                        store: yesAndNo,
                        fieldLabel: '删除历史',
                        queryMode: 'local',
                        id: 'IsDeleteHistory',
                        name: 'IsDeleteHistory',
                        valueField: 'value',
                        displayField: 'text'
                    }, {
                        id: 'Description',
                        xtype: 'ngTextArea',
                        fieldLabel: '业务描述',
                        name: 'Description',
                        colspan: 3
                    }]
            });

            var techNodeInfoPanel = Ext.create('Ext.ng.TableLayoutForm', {
                buskey: 'id',
                otype: otype,
                columnsPerRow: 3,
                fields: [{
                        xtype: 'combo',
                        store: yesAndNo,
                        fieldLabel: '归档',
                        queryMode: 'local',
                        id: 'IsArchive',
                        name: 'IsArchive',
                        valueField: 'value',
                        displayField: 'text'
                    }, {
                        xtype: 'combo',
                        store: yesAndNo,
                        fieldLabel: '缓存',
                        queryMode: 'local',
                        id: 'IsCache',
                        name: 'IsCache',
                        valueField: 'value',
                        displayField: 'text'
                    }, {
                        xtype: 'combo',
                        store: yesAndNo,
                        fieldLabel: '生成视图',
                        queryMode: 'local',
                        id: 'IsGenerateView',
                        name: 'IsGenerateView',
                        valueField: 'value',
                        displayField: 'text'
                    }, {
                        id: 'TableSpaceSize',
                        xtype: 'ngNumber',//'numberfield',
                        fieldLabel: '表空间大小(兆为单位)',
                        name: 'TableSpaceSize'
                    }]
            });

            var sourceEntityComboTree = Ext.create('Ext.ng.TreePanel', {
                treeFields: [{ name: 'text', type: 'string' }          
                ],
                url: '@Url.Content("~/Knowledge/")' + 'GetEntityTree',
                height:200
            });
            
            var targetEntityComboTree = Ext.create('Ext.ng.TreePanel', {
                treeFields: [{ name: 'text', type: 'string' }
                ],
                url: '@Url.Content("~/Knowledge/")' + 'GetEntityTree',
                height: 200
            });


            var sourceEntityTreeCombo = Ext.create('Ext.ng.TreeComboBox', {
                name: 'sourceEntityTreeCombo',
                valueField: 'id',
                displayField: 'text',
                treePanel: sourceEntityComboTree,
                //treeMinWidth: 200,
                effectiveNodeType: 'leaf', // 'all',leaf仅叶子有效果
                treeValueField: 'id',
                anchor: '95%'
            });
            
            var targetEntityTreeCombo = Ext.create('Ext.ng.TreeComboBox', {
                name: 'targetEntityTreeCombo',
                valueField: 'id',
                displayField: 'text',
                treePanel: targetEntityComboTree,
                //treeMinWidth: 200,
                effectiveNodeType: 'leaf', // 'all',leaf仅叶子有效果
                treeValueField: 'id',
                anchor: '95%'
            });
            
            var sourcePropertyCombo = Ext.create('Ext.ng.ComboBox', {
                valueField: "id",
                displayField: 'displayname',
                helpid: 'metadataEntity',
                queryMode: 'remote', //local指定为本地数据  远程为remote      
                name: 'metadataEntity',
                rootPath:'../../',
                listFields: 'name,displayname',
                listHeadTexts: '名称,显示名称'
            });
            
            var targetPropertyCombo = Ext.create('Ext.ng.ComboBox', {
                valueField: "id",
                displayField: 'displayname',
                helpid: 'metadataEntity',
                queryMode: 'remote', //local指定为本地数据  远程为remote      
                name: 'metadataEntity',
                rootPath: '../../',
                listFields: 'name,displayname',
                listHeadTexts: '名称,显示名称'
            });
           

            Ext.define('relationGridModel', {
//编辑状态下,状态列的下拉菜单的 model
                extend: 'Ext.data.Model',
                fields: [{
                        name: 'Id',
                        type: 'string'
                    }, {
                        name: 'RelationType',
                        type: 'string'
                    }, {
                        name: 'SourcePropertyId',
                        type: 'string'
                    }, {
                        name: 'TargetEntityId',
                        type: 'string'
                    }, {
                        name: 'TargetPropertyId',
                        type: 'string'
                    }]
            });

            Ext.define('propertyGridModel', {
//编辑状态下,状态列的下拉菜单的 model
                extend: 'Ext.data.Model',
                fields: [{
                        name: 'Id',
                        type: 'string'
                    }, {
                        name: 'Name',
                        type: 'string'
                    }, {
                        name: 'DisplayName',
                        type: 'string'
                    }, {
                        name: 'DataType',
                        type: 'int'
                    }, {
                        name: 'IsPrimaryKey',
                        type: 'bool'
                    }, {
                        name: 'IsAllowRepeat',
                        type: 'bool'
                    }, {
                        name: 'IsAllowNull',
                        type: 'bool'
                    }]
            });            


            var relationGridStore = Ext.create('Ext.data.Store', {
                model: 'relationGridModel'
            });

            var propertyGridStore = Ext.create('Ext.data.Store', {
                model: 'propertyGridModel'
            });

            var relationCellEditing = Ext.create('Ext.grid.plugin.CellEditing', {
                clicksToEdit: 1
            });

            var propertyCellEditing = Ext.create('Ext.grid.plugin.CellEditing', {
                clicksToEdit: 1
            });

            var relationDrop = Ext.create('Ext.form.ComboBox', {
                store: relationStyleSore,
                queryMode: 'local',
                id: 'RelationType',
                name: 'RelationType',
                valueField: 'value',
                displayField: 'text'
            });

            var renderRelationType = function(val, cell, record, rowIndex, colIndex, store) {
                var record = this.getAt(val);
                if (record == null) {
                    return val;
                } else {
                    return record.data.text; // 获取record中的数据集中的display字段的值 
                }
            };

            var propertyGrid = Ext.create('Ext.ng.GridPanel', {
                region: 'center',
                layout: 'border',
                flex: 2,
                //renderTo: 'gridpanel',
                //frame: true,
                store: propertyGridStore,
                columnLines: true,
                buskey: 'id', //对应的业务表主键
                otype: otype, //操作类型,add||edit
                //autoScroll: true,
                //selType: 'cellmodel',
                //selModel: Ext.create('Ext.selection.CheckboxModel'),
                layout: {
                    //type: 'hbox',
                    align: 'stretch'
                },
                columns: [Ext.create('Ext.grid.RowNumberer', { text: '行号', width: 35 }),
                    {
                        header: '名称',
                        flex: 1,
                        sortable: true,
                        dataIndex: 'Name',
                        editor: {
                            allowBlank: false
                        }
                    }, {
                        header: '显示名称',
                        flex: 1,
                        sortable: true,
                        dataIndex: 'DisplayName',
                        editor: {
                            allowBlank: false
                        }
                    }, {
                        header: '数据类型',
                        flex: 1,
                        sortable: true,
                        dataIndex: 'DataType',
                        editor: {
                            allowBlank: false
                        }
                    }, {
                        header: '主键',
                        flex: 1,
                        sortable: true,
                        dataIndex: 'IsPrimaryKey',
                        editor: {
                            allowBlank: false
                        }
                    }, {
                        header: '唯一',
                        flex: 1,
                        sortable: true,
                        dataIndex: 'IsAllowRepeat',
                        editor: {
                            allowBlank: false
                        }
                    }, {
                        header: '非空',
                        flex: 1,
                        sortable: true,
                        dataIndex: 'IsAllowNull',
                        editor: {
                            allowBlank: false
                        }
                    }],
                viewConfig: {
                    forceFit: true,
                    scrollOffset: 0
                },
                //forceFit: true,
                plugins: [propertyCellEditing]
            });

            var relationGrid = Ext.create('Ext.ng.GridPanel', {
                region: 'center',
                layout: 'border',
                flex: 2,
                //renderTo: 'gridpanel',
                //frame: true,
                store: relationGridStore,
                columnLines: true,
                buskey: 'id', //对应的业务表主键
                otype: otype, //操作类型,add||edit
                //autoScroll: true,
                //selType: 'cellmodel',
                //selModel: Ext.create('Ext.selection.CheckboxModel'),
                layout: {
                    //type: 'hbox',
                    align: 'stretch'
                },
                columns: [Ext.create('Ext.grid.RowNumberer', { text: '行号', width: 35 }),
                    {
                        header: '关系',
                        flex: 1,
                        sortable: true,
                        dataIndex: 'RelationType',
                        editor: relationDrop,
                        renderer: Ext.Function.bind(renderRelationType, relationStyleSore)
                    }, {
                        header: '源字段',
                        flex: 1,
                        sortable: true,
                        dataIndex: 'SourcePropertyId',
                        editor: sourcePropertyCombo
                    }, {
                        header: '目标表',
                        flex: 1,
                        sortable: true,
                        dataIndex: 'TargetEntityId',
                        editor: targetEntityTreeCombo
                    },{
                        header: '目标字段',
                        flex: 1,
                        sortable: true,
                        dataIndex: 'TargetPropertyId',
                        editor: targetPropertyCombo
                    }],
                viewConfig: {
                    forceFit: true,
                    scrollOffset: 0
                },
                //forceFit: true,
                plugins: [relationCellEditing]
            });
            
            relationGrid.on('edit', function (editor, e) {
                // commit the changes right after editing finished
                if (e.field == 'TargetEntityId') {
                    targetPropertyCombo.setOutFilter({ ParentId: e.value });
                }
            });

            var entityRelationPanel = Ext.create('Ext.ng.FormPanel', {
                region: 'center',
                flex: 0.8,
                items: [relationToolbar, relationGrid]
            });

            var entityPropertyPanel = Ext.create('Ext.ng.FormPanel', {
                region: 'center',
                flex: 0.8,
                items: [propertyToolbar, propertyGrid]
            });
            
            var entityHelpPanel = Ext.create('Ext.ng.TableLayoutForm', {
                buskey: 'id',
                otype: 'add',
                columnsPerRow: 3,
                region: 'center',
                fields: [{
                    xtype: 'combo',
                    store: yesAndNo,
                    fieldLabel: '过滤重复行',
                    queryMode: 'local',
                    id: 'IsDistinct',
                    name: 'IsDistinct',
                    valueField: 'value',
                    displayField: 'text'
                }, {
                    id: 'SqlFilter',
                    xtype: 'ngTextArea',
                    fieldLabel: 'SQL过滤',
                    name: 'SqlFilter',
                    colspan: 3
                }]
            });

            var tabPanel = Ext.create('Ext.tab.Panel', {
                //renderTo: 'tabpanel',
                //xtype: 'tabpanel',
                flex: 1,
                region: 'center',
                deferredRender: false,
                plain: true,
                activeTab: 0,
                //height: 600,
                defaults: { bodyStyle: 'padding:3px' },
                items: [{
                        layout: 'border', //使grid填充                
                        title: '基本信息',
                        //autoScroll: true,
                        //height:400,
                        //defaults: { width: 230 },
                        //defaultType: 'textfield',
                        items: [baseNodeInfoPanel]
                    }, {
                        layout: 'border', //使grid填充             
                        title: '业务信息',
                        //autoScroll: true,
                        //contentEl: 'center1',
                        //defaults: { width: 230 },
                        //defaultType: 'textfield',
                        items: [bizNodeInfoPanel]
                    }, {
                        layout: 'border', //使grid填充             
                        title: '技术信息',
                        //autoScroll: true,
                        //contentEl: 'center1',
                        //defaults: { width: 230 },
                        //defaultType: 'textfield',
                        items: [techNodeInfoPanel]
                    }, {
                        layout: 'border', //使grid填充             
                        title: '字段维护',
                        //autoScroll: true,
                        //contentEl: 'center1',
                        //defaults: { width: 230 },
                        //defaultType: 'textfield',
                        items: [entityPropertyPanel]
                    }, {
                        layout: 'border', //使grid填充             
                        title: '实体关系',
                        //autoScroll: true,
                        //contentEl: 'center1',
                        //defaults: { width: 230 },
                        //defaultType: 'textfield',
                        items: [entityRelationPanel]
                    }, {
                        layout: 'border', //使grid填充             
                        title: '帮助',
                        //autoScroll: true,
                        //contentEl: 'center1',
                        //defaults: { width: 230 },
                        //defaultType: 'textfield',
                        items: [entityHelpPanel]
                    }]
            });


            Ext.create('Ext.container.Viewport', {
                id: "mainViewPort",
                layout: 'border',
                items:
                [
                    ngToolbar, tabPanel
                ]
            });

            var namespace = Ext.getCmp('Namespace');
            var version = Ext.getCmp('Version');
            var name = Ext.getCmp('Name');
            var currentDisplayName = Ext.getCmp('CurrentDisplayName');
            var displayName = Ext.getCmp('DisplayName');
            var id = Ext.getCmp('Id');
            var parentId = Ext.getCmp('ParentId');
            var description = Ext.getCmp('Description');
            
            var currentDisplayNameWin = Ext.create('Ext.ng.languageWin');
            var descriptionWin = Ext.create('Ext.ng.languageWin');

            name.on('change', function(newValue, oldValue, eOpts) {
                namespace.setValue(transferData.Namespace + '.' + newValue.getValue());
            });

            if (otype == oType.Add) {
                id.setValue(buskey);
                parentId.setValue(transferData.ParentId);
                namespace.setReadOnly(true);
                namespace.setValue(transferData.Namespace + '.');
                version.setReadOnly(true);
                version.setValue('1.0.0.0');

                name.setValue(transferData.Name);
                currentDisplayName.setValue(transferData.CurrentDisplayName);
            } else if (otype == oType.Edit) {
                var baseNodeInfoForm = baseNodeInfoPanel.getForm();
                var bizNodeInfoForm = bizNodeInfoPanel.getForm();
                var entityHelpForm = entityHelpPanel.getForm();
                var techNodeInfoForm = techNodeInfoPanel.getForm();
                
                baseNodeInfoForm.setValues(transferData);
                bizNodeInfoForm.setValues(transferData);
                entityHelpForm.setValues(transferData);
                techNodeInfoForm.setValues(transferData);

                currentDisplayName.setValue(transferData.CurrentDisplayName);
                relationGridStore.insert(relationGridStore.getCount(), transferGridData);
                propertyGridStore.insert(propertyGridStore.getCount(), transferPropertiesGridData);
                
                if (displayData[0])
                    currentDisplayNameWin.initLanguageGridInfo(displayData);
                if (descriptionData[0])
                    descriptionWin.initLanguageGridInfo(descriptionData);
            }
            
            currentDisplayName.on('focus', function (the, eOpts) {
                currentDisplayNameWin.showLanguageInfoWindow();
            });

            description.on('focus', function (the, eOpts) {
                descriptionWin.showLanguageInfoWindow();
            });
            
            var frame = $GetWFrame();
            if (frame) {
                var listref = Ext.create('Ext.ng.LanguageRefresher');
                frame.ListObserver.add('list', listref);
                listref.on('RefreshLanguage', function () {
                    currentDisplayName.setValue(currentDisplayNameWin.getCurrentLanguageValue());
                    description.setValue(descriptionWin.getCurrentLanguageValue());
                });
                
                var propertiesListref = Ext.create('Ext.ng.PropertiesRefresher');
                frame.ListObserver.add('propertiesList', propertiesListref);
                propertiesListref.on('RefreshProperties', function (data) {
                    propertyGridStore.insert(propertyGridStore.getCount(), data);

                });
            }
            


            //保存
            ngToolbar.get("save").on('click', function() {
                if (!baseNodeInfoPanel.isValid() || !bizNodeInfoPanel.isValid() || !techNodeInfoPanel.isValid() || !relationGrid.isValid() || !entityHelpPanel.isValid()) {
                    alert('格式不符合要求');
                    return;
                }
                var mergeData = MergeFormData([baseNodeInfoPanel, bizNodeInfoPanel, techNodeInfoPanel, entityHelpPanel], 'id', otype);
                var gridData = relationGrid.getAllGridData();
                
                var displayNameData = currentDisplayNameWin.getLanguageGridInfo();
                var descriptionData = descriptionWin.getLanguageGridInfo();

                var action = '';
                switch (otype) {
                case oType.Add:
                    action = "AddEntity";
                    break;
                case oType.Edit:
                    action = "UpdateEntity";
                    break;
                default:
                }

                Ext.Ajax.request({
                    params: { 'mergeData': mergeData, 'gridData': gridData, 'displayNameData': displayNameData, 'descriptionData': descriptionData },
                    url: '@Url.Content("~/Knowledge/")' + action,
                    success: function (response) {
                        var resp = Ext.JSON.decode(response.responseText);
                        if (resp.status === "ok") {
                            if (resp.id && resp.id.length != 0 && resp.name && resp.name.length != 0) {
                                top.setCurrentNodeValue(resp.id, resp.name);
                            }

                        } else {
                            Ext.MessageBox.alert('保存失败', resp.status);
                        }
                    }
                });


            });
            
            ngToolbar.get("export").on('click', function () {
               
            });

            //ngToolbar.get("columnMaintain").on('click', function () {
            //    top.createNewNodeAndTab('NewEntityProperty', '新建实体字段', 'EntityPropertyView', oType.Add);
            //});

            //增行
            relationToolbar.items.get('addRelation').on('click', function() {

                var data = [{
                    'Id': '',
                    'RelationType': '',
                    'SourcePropertyId': '',
                    'TargetEntityId': '',
                    'TargetPropertyId': ''
                }];

                var count = relationGridStore.getCount();
                relationGridStore.insert(count, data);
                relationGrid.getSelectionModel().select(count);
            });

            //删行
            relationToolbar.items.get('deleteRelation').on('click', function() {
                //;
                var data = relationGrid.getSelectionModel().getSelection();
                if (data.length > 0) {
                    Ext.Array.each(data, function(record) {
                        relationGridStore.remove(record); //前端删除

                    });

                }

            });

            //增行
            propertyToolbar.items.get('addProperty').on('click', function() {

                top.createNewNodeAndTab('NewEntityProperty', '新建实体字段', 'EntityPropertyView', oType.Add, nodeType.propertyNode);

            });            


        });

    </script>*@
}
